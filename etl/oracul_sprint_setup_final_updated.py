import logging

from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent
csv_path = Path(os.getenv("ADDRESS_CSV_PATH", BASE_DIR / "data" / "addresses.csv"))
from dotenv import load_dotenv
import pandas as pd
from tqdm import tqdm
from sqlalchemy import create_engine, insert, Table, MetaData
from sqlalchemy.dialects.postgresql import insert as pg_insert

from utils.logger import setup_logger
from utils.db_config import get_engine
from utils.telegram import send_telegram_message
from utils.etherscan import get_erc20_transactions
from clustering.wallet_clusterer import run_clustering
from etl.wallet_token_tracker import scan_tokens_for_wallet
from etl.balance_updater import update_wallet_balances
from etl.save_token_prices import fetch_and_save_token_prices

# üìÇ –ü—É—Ç–∏


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
setup_logger()
logging.info(f"üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: {__file__}")

engine = get_engine()

# –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É
def insert_unique_rows(df, table_name, engine):
    metadata = MetaData()
    metadata.reflect(bind=engine)
    table_obj = metadata.tables.get(table_name)

    if not table_obj:
        logging.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    with engine.begin() as conn:
        for _, row in df.iterrows():
            stmt = pg_insert(table_obj).values(row.to_dict())
            stmt = stmt.on_conflict_do_nothing(index_elements=["tx_hash"])
            try:
                conn.execute(stmt)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
def collect_and_load(address, label=None):
    logging.info(f"üì• –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {address} ({label})")
    df = get_erc20_transactions(address)
    if not isinstance(df, pd.DataFrame) or df.empty:
        logging.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")
        return
    df["wallet_label"] = label
    insert_unique_rows(df, "token_transfers", engine)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ CSV
def collect_from_csv(csv_path):
    df = pd.read_csv(csv_path)
    tqdm.pandas(desc="üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤")
    df.progress_apply(lambda row: collect_and_load(row["address"], row.get("wallet_label")), axis=1)

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
try:
    logging.info("üöÄ –°—Ç–∞—Ä—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º")
    fetch_and_save_token_prices()
    run_clustering()
    csv_path = os.getenv("ADDRESS_CSV", "data/addresses.csv")
    collect_from_csv(csv_path)
    update_wallet_balances()
    logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    logging.info("üèÅ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    send_telegram_message("‚úÖ Oracul: –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
    send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ Oracul: {e}")
