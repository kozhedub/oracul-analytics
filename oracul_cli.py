import argparse
import subprocess
from utils.telegram import send_telegram_message

import logging
from utils.logger import setup_logger

setup_logger()
logging.info(f"üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: {__file__}")

def run_command(description, command):
    try:
        print(f"\nüöÄ {description}...")
        subprocess.run(command, check=True)
        print(f"‚úÖ {description} ‚Äî –£—Å–ø–µ—à–Ω–æ")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} ‚Äî –û—à–∏–±–∫–∞: {e}")
        send_telegram_message(f"‚ùå {description} ‚Äî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏")


def main():
    parser = argparse.ArgumentParser(description="üß† Oracul CLI Commander")

    parser.add_argument("--collect", action="store_true", help="–°–æ–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å–∞–º")
    parser.add_argument("--balances", action="store_true", help="–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∞–¥—Ä–µ—Å–æ–≤")
    parser.add_argument("--meta", action="store_true", help="–û–±–Ω–æ–≤–∏—Ç—å wallets_meta")
    parser.add_argument("--prices", action="store_true", help="–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–æ–≤")
    parser.add_argument("--cluster", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é")
    parser.add_argument("--whales", action="store_true", help="Whale alerts")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ—Å—å Oracul-–ø–∞–π–ø–ª–∞–π–Ω")

    args = parser.parse_args()

    if args.all or args.collect:
        run_command("–°–±–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", ["python", "etl/oracul_sprint_setup.py"])

    if args.balances:
        run_command("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤", ["python", "etl/balance_updater.py"])

    if args.meta:
        run_command("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ wallets_meta", ["python", "etl/wallets_meta_updater.py"])

    if args.prices:
        run_command("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤", ["python", "utils/prices.py"])

    if args.cluster:
        run_command("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", ["python", "clustering/wallet_clusterer.py"])

    if args.whales:
        run_command("Whale Alerts", ["python", "tools/whale_alerts.py"])


if __name__ == "__main__":
    main()
