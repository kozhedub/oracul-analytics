import os
import logging
from sqlalchemy import create_engine, text
from utils.logger import setup_logger
from dotenv import load_dotenv

print("üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
logging.info("üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


load_dotenv()
setup_logger()

logging.info("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
print("üõ†Ô∏è –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã...")

# üìÇ –ü—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
csv_path = os.getenv("ADDRESS_CSV_PATH", os.path.join(BASE_DIR, "../data/addresses.csv"))

engine = create_engine(DATABASE_URL)

with engine.connect() as conn:
    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS token_prices (
        token_symbol TEXT PRIMARY KEY,
        price_usd NUMERIC,
        updated_at TIMESTAMP DEFAULT NOW()
    )
    """))
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ token_prices –≥–æ—Ç–æ–≤–∞")

    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS wallets_meta (
        address TEXT PRIMARY KEY,
        first_tx TIMESTAMP,
        last_tx TIMESTAMP,
        tx_count INTEGER,
        total_value NUMERIC,
        label TEXT
    )
    """))
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ wallets_meta –≥–æ—Ç–æ–≤–∞")

    conn.execute(text("""
    CREATE TABLE IF NOT EXISTS wallet_balances (
        address TEXT PRIMARY KEY,
        balance_eth NUMERIC,
        balance_token NUMERIC,
        usd_value NUMERIC,
        first_seen TIMESTAMP,
        last_seen TIMESTAMP
    )
    """))
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ wallet_balances –≥–æ—Ç–æ–≤–∞")

print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
logging.info("üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
