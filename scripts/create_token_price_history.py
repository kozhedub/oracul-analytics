import os
import logging
from dotenv import load_dotenv
from sqlalchemy import create_engine, MetaData, select, insert
from datetime import datetime, timezone
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
logging.basicConfig(level=logging.INFO)
logging.info(f"üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: {__file__}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
metadata = MetaData()
metadata.reflect(bind=engine)

# –¢–∞–±–ª–∏—Ü—ã
token_prices = metadata.tables.get("token_prices")
token_price_history = metadata.tables.get("token_price_history")

if not token_prices or not token_price_history:
    logging.error("‚ùå –¢–∞–±–ª–∏—Ü—ã 'token_prices' –∏–ª–∏ 'token_price_history' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î.")
    exit(1)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
with engine.connect() as conn:
    result = conn.execute(select(token_prices.c.token_symbol, token_prices.c.price_usd))
    rows = result.fetchall()

    if not rows:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ token_prices.")
        exit(0)

    # –í—Å—Ç–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏


    now = datetime.now(timezone.utc)
    inserts = []
    for row in rows:
        if row["price_usd"] is not None:
            inserts.append({
                "token_symbol": row["token_symbol"],
                "price_usd": row["price_usd"],
                "fetched_at": now,
            })

    if inserts:
        conn.execute(insert(token_price_history), inserts)
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(inserts)} –∑–∞–ø–∏—Å–µ–π –≤ token_price_history.")
    else:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.")
