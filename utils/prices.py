import os
from datetime import datetime, timezone
import requests
from sqlalchemy import create_engine, MetaData, Table
from sqlalchemy.dialects.postgresql import insert as pg_insert
from dotenv import load_dotenv
import logging
from utils.logger import setup_logger


from sqlalchemy.sql import select

setup_logger()
logging.info(f"üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: {__file__}")

def update_token_prices():
    load_dotenv()
    engine = create_engine(os.getenv("DATABASE_URL"))
    now = datetime.now(timezone.utc)

    token_map = {
        "USDC": "usd-coin",
        "WETH": "weth",
        "USDT": "tether",
        "DAI": "dai",
        "WBTC": "wrapped-bitcoin",
        "ELON": "dogelon-mars",
        "LINK": "chainlink",
        "MEME": "memecoin",
        "PEPE": "pepe"
    }

    url = f"https://api.coingecko.com/api/v3/simple/price?ids={','.join(token_map.values())}&vs_currencies=usd"

    try:
        response = requests.get(url)
        response.raise_for_status()
        prices = response.json()

        rows = []
        for symbol, coingecko_id in token_map.items():
            price_usd = prices.get(coingecko_id, {}).get("usd")
            if price_usd is not None:
                logging.info(f"üîç –¢–æ–∫–µ–Ω {symbol.upper()} ‚Üí ${price_usd}")
                rows.append({
                    "token_symbol": symbol.upper(),
                    "price_usd": price_usd,
                    "updated_at": now
                })

        if rows:
            metadata = MetaData()
            metadata.reflect(engine)
            if "token_prices" not in metadata.tables:
                logging.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'token_prices' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            prices_table = Table("token_prices", metadata, autoload_with=engine)

            with engine.begin() as conn:
                for row in rows:
                    stmt = pg_insert(prices_table).values(**row)
                    stmt = stmt.on_conflict_do_update(
                        index_elements=["token_symbol"],
                        set_={
                            "price_usd": row["price_usd"],
                            "updated_at": row["updated_at"]
                        }
                    )
                    conn.execute(stmt)

            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –∫—É—Ä—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î")
        else:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω.")

    except Exception as e:
        logging.error(f"[Prices] –û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")

from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.sql import select

def save_prices_to_db(prices):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É token_prices, –ª–æ–≥–∏—Ä—É—è —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
    metadata = MetaData()
    metadata.reflect(bind=engine)
    table_obj = metadata.tables["token_prices"]

    df = pd.DataFrame.from_dict(prices, orient="index").reset_index()
    df.columns = ["token_symbol", "price_usd"]

    with engine.begin() as conn:
        for _, row in df.iterrows():
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            old_value = conn.execute(
                select([table_obj.c.price_usd]).where(table_obj.c.token_symbol == row["token_symbol"])
            ).scalar()

            # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if old_value is not None and old_value != row["price_usd"]:
                logging.info(f"üîÑ {row['token_symbol']}: {old_value} ‚Üí {row['price_usd']}")

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            stmt = insert(table_obj).values(
                token_symbol=row["token_symbol"],
                price_usd=row["price_usd"]
            ).on_conflict_do_update(
                index_elements=["token_symbol"],
                set_={
                    "price_usd": row["price_usd"],
                    "updated_at": func.now()
                }
            )
            conn.execute(stmt)

    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∫—É—Ä—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î")



if __name__ == "__main__":
    prices = fetch_token_prices()
    save_prices_to_db()
    print("‚úÖ –ö—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")
