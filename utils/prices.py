import requests
import logging
import os
from sqlalchemy import create_engine, Table, MetaData
from sqlalchemy.dialects.postgresql import insert
from datetime import datetime, timezone
from dotenv import load_dotenv

print("üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
logging.info("üìÑ –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


load_dotenv()

# üìÇ –ü—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
csv_path = os.getenv("ADDRESS_CSV_PATH", os.path.join(BASE_DIR, "../data/addresses.csv"))

def fetch_prices_from_coingecko(symbols):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ CoinGecko.
    symbols ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ): ["usdc", "dai", "weth"]
    """
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": ",".join(symbols),
        "vs_currencies": "usd",
    }
    response = requests.get(url, params=params)
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ CoinGecko: {response.status_code} ‚Äî {response.text}")
    return response.json()


def update_token_prices():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤")
    print("üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã —Ç–æ–∫–µ–Ω–æ–≤...")

    # –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
    token_map = {
        "usdc": "usd-coin",
        "dai": "dai",
        "weth": "weth",
        "usdt": "tether",
        "wbtc": "wrapped-bitcoin"
    }

    try:
        prices = fetch_prices_from_coingecko(list(token_map.values()))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ CoinGecko: {str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞ CoinGecko: {str(e)}")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_url = os.getenv("DATABASE_URL")
    engine = create_engine(db_url)
    metadata = MetaData()
    metadata.reflect(bind=engine)

    if "token_prices" not in metadata.tables:
        logging.warning("‚õî –¢–∞–±–ª–∏—Ü–∞ token_prices –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("‚õî –¢–∞–±–ª–∏—Ü–∞ token_prices –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    table = metadata.tables["token_prices"]
    now = datetime.utcnow()

    rows = []
    for symbol, coingecko_id in token_map.items():
        usd_value = prices.get(coingecko_id, {}).get("usd")
        if usd_value is not None:
            rows.append({
                "token_symbol": symbol.upper(),
                "usd_value": usd_value,
                "updated_at": now
            })

    with engine.begin() as conn:
        for row in rows:
            stmt = insert(table).values(**row)
            stmt = stmt.on_conflict_do_update(
                index_elements=["token_symbol"],
                set_={"usd_value": row["usd_value"], "updated_at": now}
            )
            conn.execute(stmt)

    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫—É—Ä—Å—ã {len(rows)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚úÖ –¶–µ–Ω—ã {len(rows)} —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

